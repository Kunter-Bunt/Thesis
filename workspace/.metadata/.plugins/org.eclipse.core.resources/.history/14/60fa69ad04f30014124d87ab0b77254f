/**
 * 
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;

/**
 * @author mawo
 *
 */
public class DBConnect {
	private String url;
	
	
	public DBConnect(String DatenbankUrl) {
		url = DatenbankUrl;
		loadDriver();
		connect();
	}
	
	Connection conn = null;
	
	private void loadDriver() {
		 try {
	            Class.forName("com.mysql.jdbc.Driver").newInstance();
			    System.out.println("Successfully loaded Driver");
	        } catch (Exception ex) {
	            System.out.println("Failed to load JDBC");
	        }
	}
	
	private void connect() {
		try {
		    conn = DriverManager.getConnection(url);
		    System.out.println("Connected");
		    // Do something with the Connection
		} catch (SQLException ex) {
		    System.out.println("SQLException: " + ex.getMessage());
		    System.out.println("SQLState: " + ex.getSQLState());
		    System.out.println("VendorError: " + ex.getErrorCode());
		}
	}
	
	public ResultSet getSQL(String select, String from, String where) {
		
		Statement stmt = null;
		ResultSet rs = null;
		
		try {
		    stmt = conn.createStatement();
		    rs = stmt.executeQuery("SELECT " + select + " FROM " + from + "WHERE" + where);
		
		    return rs;
		}
		catch (SQLException ex){
		    // handle any errors
		    System.out.println("SQLException: " + ex.getMessage());
		    System.out.println("SQLState: " + ex.getSQLState());
		    System.out.println("VendorError: " + ex.getErrorCode());
			return null;
		}
		finally {
		    // it is a good idea to release
		    // resources in a finally{} block
		    // in reverse-order of their creation
		    // if they are no-longer needed
		
		    if (rs != null) {
		        try {
		            rs.close();
		        } catch (SQLException sqlEx) { } // ignore
		
		        rs = null;
		    }
		
		    if (stmt != null) {
		        try {
		            stmt.close();
		        } catch (SQLException sqlEx) { } // ignore
		
		        stmt = null;
		    }
		    
		}
	}

}
