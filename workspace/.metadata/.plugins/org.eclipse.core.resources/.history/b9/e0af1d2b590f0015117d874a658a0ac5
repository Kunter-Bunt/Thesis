import java.io.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.Random;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.layout.RowLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.TextLayout;

import Features.*;
import Vectors.*;
import weka.core.converters.ConverterUtils.DataSource;
import weka.core.Instances;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Remove;
import weka.filters.unsupervised.attribute.NumericToNominal;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.Evaluation;
import weka.core.Utils;

/**
 * 
 */

/**
 * @author mawo
 *
 */
public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		
		DBConnect db = new DBConnect("jdbc:mysql://localhost:3306/testdatenbank?" +
                "user=root");
		
		
		ResultSet result = db.getSQL("SELECT * FROM `training` ORDER BY `Unixtime`");
		
		try{
			
			MultilayerPerceptron mlp = new MultilayerPerceptron();
			Remove rm = new Remove(); 
			
			 mlp.setHiddenLayers("t");
			 mlp.setTrainingTime(5);
			 rm.setAttributeIndices("1"); 
			 
			Display display = new Display();
			Shell shell = new Shell(display);
			Text MLPOpt = new Text(shell, SWT.MULTI | SWT.BORDER);
			Text FilOpt = new Text(shell, SWT.MULTI | SWT.BORDER);
			Button compute = new Button(shell, SWT.PUSH);
			
			shell.setText("Appliance State Separator");
			GridLayout gridLayout = new GridLayout();
	        gridLayout.numColumns = 3;
	        gridLayout.horizontalSpacing = 80;
			shell.setLayout(gridLayout);
			shell.setSize(500, 200);
		    compute.setText("Test Network");
		    compute.setSize(150, 25);
		    MLPOpt.setSize(150, 25);
		    FilOpt.setSize(150, 25);
		    
		    String[] options = mlp.getOptions();
			String opt = "";
			for (String option : options) opt += option + " ";
		    MLPOpt.setText(opt);
		    
		    options = rm.getOptions();
			opt = "";
			for (String option : options) opt += option + " ";
		    FilOpt.setText(opt);
			
		    compute.addSelectionListener(new SelectionListener() {
	
			      public void widgetSelected(SelectionEvent event) {
			    	  try {
						compute(shell, Utils.splitOptions(MLPOpt.getText()), Utils.splitOptions(FilOpt.getText()));
					} catch (Exception e) {
						e.printStackTrace();
					}
			      }
	
			      public void widgetDefaultSelected(SelectionEvent event) {
			    	  try {
			    		  widgetSelected(event);
					} catch (Exception e) {
						e.printStackTrace();
					}
			      }
			 });
			
			
			shell.open();	
			while (!shell.isDisposed()) {
				if (!display.readAndDispatch()) display.sleep();
			}
			display.dispose();
			

		}catch(Exception e) {System.out.println(e);}
		finally {
			db.cleanSQL();
		}
	}
	
	public static void compute(Shell s, String[] opt, String[] fil) throws Exception{	
			//Expander ex = new Expander(db);
			//expand profil0
			//ex.expand("SELECT * FROM `profil8` ORDER BY `Unixtime`", "INSERT INTO profil8training (`Unixtime`,`Reltime`,`Spannung`,`Stromstärke`,`Wirkleistung`, `Klasse`)", 1384066710, 5550);
			//FeatureWriter fw = new FeatureWriter(db, false);
			/*fw.zeitreihe("SELECT * FROM `training` ORDER BY `Unixtime`", "INSERT INTO `trainingzeitnorm` (`Unixtime`, "
					+ "`Wirkleistung t-10`, `Wirkleistung t-9`, `Wirkleistung t-8`, `Wirkleistung t-7`, `Wirkleistung t-6`, "
					+ "`Wirkleistung t-5`, `Wirkleistung t-4`, `Wirkleistung t-3`, `Wirkleistung t-2`, `Wirkleistung t-1`, "
					+ "`Wirkleistung t+0`, `Wirkleistung t+1`, `Wirkleistung t+2`, `Wirkleistung t+3`, `Wirkleistung t+4`, "
					+ "`Wirkleistung t+5`, `Wirkleistung t+6`, `Wirkleistung t+7`, `Wirkleistung t+8`, `Wirkleistung t+9`, "
					+ "`Wirkleistung t+10`, `Klasse`)", 1382290611, 1384072259);
			*/
			//fw.experte("SELECT * FROM `training` ORDER BY `Unixtime`", "INSERT INTO `experte` (`Unixtime`, `Wirkleistung`, `FolgeDurchschnitt`, `MaxWirkleistung`, `MinPeakWirkleistung`,`Klasse`)", 1382290611, 1384072259);
			 
		
		Shell shell = new Shell(s);
		Text results = new Text(shell, SWT.MULTI);
		
		shell.setLayout(new FillLayout());
		shell.setSize(400, 500);
		results.setText("computing...");
		results.setEditable(false);
		
	
		
			 DataSource source = new DataSource("C:\\Users\\mawo\\Documents\\GitHub\\Thesis\\workspace\\ApplianceStateSeperator\\src\\trainingszeit.arff");
			 Instances data = source.getDataSet();
			 if (data.classIndex() == -1)
				   data.setClassIndex(data.numAttributes() - 1);
			 
			 //System.out.println("Successfully loaded Data\n");
			 
			 //String[] optionsrm = weka.core.Utils.splitOptions("-R 1");
			 /*
			 NumericToNominal ntn = new NumericToNominal();
			 ntn.setAttributeIndices("last");
			 ntn.setInputFormat(data);                          
			 Instances newData = Filter.useFilter(data, ntn);
			 */
			 Remove rm = new Remove(); 
			 rm.setOptions(fil);                        
			 //remove.setOptions(optionsrm);                           
			 //remove.setInputFormat(data);  
			 //Instances newData = Filter.useFilter(data, rm);  
			 
			 MultilayerPerceptron mlp = new MultilayerPerceptron();
			 mlp.setOptions(opt);
			 
			 FilteredClassifier fc = new FilteredClassifier();
			 fc.setFilter(rm);
			 fc.setClassifier(mlp);
			 
		String[] options = mlp.getOptions();
		String title = "MultiLayerPerceptron ";
		for (String option : options) title += option + " ";
		shell.setText(title);
		shell.open();		
			 
			TestModel test = new TestModel(title);
			test.start(data, fc);
			 
		//while (!test.finished) Thread.sleep(1000);
			synchronized(test){
	            try{
	                test.wait();
	            }catch(InterruptedException e){
	                e.printStackTrace();
	            }
		results.setText(test.res);
	}
}
